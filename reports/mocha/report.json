{
  "stats": {
    "suites": 3,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-06T14:28:53.225Z",
    "end": "2025-09-06T14:28:54.852Z",
    "duration": 1627,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "444a25c0-ceb2-408f-ad29-ebdaa3d61e09",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
          "title": "ExampleToken — core behavior",
          "fullFile": "C:\\Users\\Toshimoto\\Desktop\\blockchain-qa-template\\test\\erc20.core.spec.ts",
          "file": "\\test\\erc20.core.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ExampleToken — core behavior\"",
              "fullTitle": "ExampleToken — core behavior \"before each\" hook in \"ExampleToken — core behavior\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[deployer, alice, bob] = await hardhat_1.ethers.getSigners();\ntoken = await deployToken();\n// Ensure deployer has some balance (if the contract exposes mint()).\nconst tAny = token;\nconst me = await deployer.getAddress();\nconst bal = await token.balanceOf(me);\nif (bal === 0n && tAny.mint) {\n    await tAny.mint(me, 1000000n);\n}",
              "err": {},
              "uuid": "0095ef0a-7f5e-4057-a1d8-8c87702b838b",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "has name/symbol if exposed",
              "fullTitle": "ExampleToken — core behavior has name/symbol if exposed",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tAny = token;\nif (tAny.name)\n    (0, chai_1.expect)(await tAny.name()).to.be.a(\"string\");\nif (tAny.symbol)\n    (0, chai_1.expect)(await tAny.symbol()).to.be.a(\"string\");",
              "err": {},
              "uuid": "e2d08672-bf72-46aa-ac41-3e7d04ffa984",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totalSupply > 0 and deployer has balance",
              "fullTitle": "ExampleToken — core behavior totalSupply > 0 and deployer has balance",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const total = await token.totalSupply();\n(0, chai_1.expect)(total).to.be.gt(0n);\nconst balDeployer = await token.balanceOf(await deployer.getAddress());\n(0, chai_1.expect)(balDeployer).to.be.gt(0n);\n(0, chai_1.expect)(balDeployer).to.be.lte(total);",
              "err": {},
              "uuid": "6073c7d6-f5af-4dfc-bbdb-5eeb7ec4a348",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "transfer moves balance and emits Transfer",
              "fullTitle": "ExampleToken — core behavior transfer moves balance and emits Transfer",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const from = await deployer.getAddress();\nconst to = await alice.getAddress();\nconst fromBal = await token.balanceOf(from);\nconst amount = pickAmount(fromBal, 1000n);\nawait (0, chai_1.expect)(token.transfer(to, amount))\n    .to.emit(token, \"Transfer\")\n    .withArgs(from, to, amount);\n(0, chai_1.expect)(await token.balanceOf(to)).to.equal(amount);",
              "err": {},
              "uuid": "bd23b904-c88e-4e4d-8d4c-c1db8bacbc75",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "transfer 0 works and emits",
              "fullTitle": "ExampleToken — core behavior transfer 0 works and emits",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const to = await alice.getAddress();\nawait (0, chai_1.expect)(token.transfer(to, 0n))\n    .to.emit(token, \"Transfer\")\n    .withArgs(await deployer.getAddress(), to, 0n);",
              "err": {},
              "uuid": "6c011512-6ce9-437f-b49a-48f2a8be59cd",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "self-transfer keeps net balance the same and emits",
              "fullTitle": "ExampleToken — core behavior self-transfer keeps net balance the same and emits",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const me = await deployer.getAddress();\nconst before = await token.balanceOf(me);\nconst amount = pickAmount(before, 10n);\nawait (0, chai_1.expect)(token.transfer(me, amount))\n    .to.emit(token, \"Transfer\")\n    .withArgs(me, me, amount);\nconst after = await token.balanceOf(me);\n(0, chai_1.expect)(after).to.equal(before);",
              "err": {},
              "uuid": "854f4f6b-cd7b-42a5-a38c-06e2bbc5e824",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reverts when transferring more than balance",
              "fullTitle": "ExampleToken — core behavior reverts when transferring more than balance",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const a = await alice.getAddress();\nconst b = await bob.getAddress();\nconst aBal = await token.balanceOf(a);\nconst amount = aBal + 1n;\nawait (0, chai_1.expect)(token.connect(alice).transfer(b, amount)).to.be.reverted;",
              "err": {},
              "uuid": "86f0745d-4bc6-4aa8-9806-6370f2269f1a",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reverts when transferring to the zero address",
              "fullTitle": "ExampleToken — core behavior reverts when transferring to the zero address",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const from = await deployer.getAddress();\nconst fromBal = await token.balanceOf(from);\nconst amount = pickAmount(fromBal, 1n);\nawait (0, chai_1.expect)(token.transfer(hardhat_1.ethers.ZeroAddress, amount)).to.be.reverted;",
              "err": {},
              "uuid": "9c5acc28-5861-493c-84ea-5d807d7ab8be",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "approve sets allowance and emits Approval",
              "fullTitle": "ExampleToken — core behavior approve sets allowance and emits Approval",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spender = await alice.getAddress();\nconst amount = 5000n;\nawait (0, chai_1.expect)(token.approve(spender, amount))\n    .to.emit(token, \"Approval\")\n    .withArgs(await deployer.getAddress(), spender, amount);\n(0, chai_1.expect)(await token.allowance(await deployer.getAddress(), spender)).to.equal(amount);",
              "err": {},
              "uuid": "f23c475c-2a74-4ef5-b52e-1c1aa24cd059",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "transferFrom consumes allowance and moves funds",
              "fullTitle": "ExampleToken — core behavior transferFrom consumes allowance and moves funds",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const owner = await deployer.getAddress();\nconst spender = await alice.getAddress();\nconst to = await bob.getAddress();\nconst ownerBal = await token.balanceOf(owner);\nconst amount = pickAmount(ownerBal, 777n);\nawait token.approve(spender, amount);\nawait (0, chai_1.expect)(token.connect(alice).transferFrom(owner, to, amount))\n    .to.emit(token, \"Transfer\")\n    .withArgs(owner, to, amount);\n(0, chai_1.expect)(await token.allowance(owner, spender)).to.equal(0n);\n(0, chai_1.expect)(await token.balanceOf(to)).to.equal(amount);",
              "err": {},
              "uuid": "138726ab-44e3-4a68-a9b5-e167fad22362",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "approve overwrite OR zero-first pattern (both accepted)",
              "fullTitle": "ExampleToken — core behavior approve overwrite OR zero-first pattern (both accepted)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spender = await alice.getAddress();\nawait token.approve(spender, 10n);\nlet overwriteWorked = true;\ntry {\n    await token.approve(spender, 1n);\n}\ncatch {\n    overwriteWorked = false;\n}\nif (!overwriteWorked) {\n    await token.approve(spender, 0n);\n    await token.approve(spender, 1n);\n}\n(0, chai_1.expect)(await token.allowance(await deployer.getAddress(), spender)).to.equal(1n);",
              "err": {},
              "uuid": "34bc2393-87aa-4ef1-a66c-fd28ac73891b",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "logs include Transfer event (topic parsing smoke test)",
              "fullTitle": "ExampleToken — core behavior logs include Transfer event (topic parsing smoke test)",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const from = await deployer.getAddress();\nconst fromBal = await token.balanceOf(from);\nconst amount = pickAmount(fromBal, 42n);\nawait token.transfer(await alice.getAddress(), amount);\nconst tx = await token\n    .connect(alice)\n    .transfer(await bob.getAddress(), amount);\nconst rc = await tx.wait();\nconst iface = token.interface;\nconst found = (rc?.logs ?? []).some((log) => {\n    try {\n        const parsed = iface.parseLog(log);\n        return parsed?.name === \"Transfer\";\n    }\n    catch {\n        return false;\n    }\n});\n(0, chai_1.expect)(found).to.equal(true);",
              "err": {},
              "uuid": "c6b9708c-ea63-4c8f-ab81-959be2765906",
              "parentUUID": "2e383b55-0c52-4f3f-a223-44c18431d7ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2d08672-bf72-46aa-ac41-3e7d04ffa984",
            "6073c7d6-f5af-4dfc-bbdb-5eeb7ec4a348",
            "bd23b904-c88e-4e4d-8d4c-c1db8bacbc75",
            "6c011512-6ce9-437f-b49a-48f2a8be59cd",
            "854f4f6b-cd7b-42a5-a38c-06e2bbc5e824",
            "86f0745d-4bc6-4aa8-9806-6370f2269f1a",
            "9c5acc28-5861-493c-84ea-5d807d7ab8be",
            "f23c475c-2a74-4ef5-b52e-1c1aa24cd059",
            "138726ab-44e3-4a68-a9b5-e167fad22362",
            "34bc2393-87aa-4ef1-a66c-fd28ac73891b",
            "c6b9708c-ea63-4c8f-ab81-959be2765906"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "c5ffcf05-a175-405d-9a43-678fd0727263",
          "title": "ExampleToken — fuzzed transfers",
          "fullFile": "C:\\Users\\Toshimoto\\Desktop\\blockchain-qa-template\\test\\erc20.fuzz.spec.ts",
          "file": "\\test\\erc20.fuzz.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ExampleToken — fuzzed transfers\"",
              "fullTitle": "ExampleToken — fuzzed transfers \"before each\" hook in \"ExampleToken — fuzzed transfers\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[deployer, a1, a2] = await hardhat_1.ethers.getSigners();\ntoken = await deployTokenForFuzz();\n// Ensure deployer has balance; mint if available and needed\nconst tAny = token;\nconst me = await deployer.getAddress();\nconst bal = await token.balanceOf(me);\nif (bal === 0n && tAny.mint) {\n    await tAny.mint(me, 100000n);\n}\nelse {\n    (0, chai_1.expect)(await token.balanceOf(me)).to.be.gt(0n);\n}",
              "err": {},
              "uuid": "eee0a8a9-caf3-4387-8b40-50f9b74e66af",
              "parentUUID": "c5ffcf05-a175-405d-9a43-678fd0727263",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "random valid transfers conserve total supply",
              "fullTitle": "ExampleToken — fuzzed transfers random valid transfers conserve total supply",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const totalBefore = await token.totalSupply();\nawait fc.assert(fc.asyncProperty(fc.integer({ min: 1, max: 50 }), async (steps) => {\n    for (let i = 0; i < steps; i++) {\n        const from = i % 2 === 0 ? deployer : a1;\n        const to = i % 3 === 0 ? a1 : a2;\n        const fromBal = await token.balanceOf(await from.getAddress());\n        if (fromBal === 0n)\n            continue;\n        const raw = fc.sample(fc.integer({ min: 1, max: 1000 }), 1)[0];\n        const amount = (BigInt(raw) % fromBal) + 1n;\n        await token.connect(from).transfer(await to.getAddress(), amount);\n        (0, chai_1.expect)(await token.totalSupply()).to.equal(totalBefore);\n    }\n}), { numRuns: 10 });",
              "err": {},
              "uuid": "2cddcb7e-3221-424f-b76f-7e1e84f7344a",
              "parentUUID": "c5ffcf05-a175-405d-9a43-678fd0727263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2cddcb7e-3221-424f-b76f-7e1e84f7344a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 508,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "d0090051-8f7c-4df8-bd24-18b08b2f5332",
          "title": "ExampleToken",
          "fullFile": "C:\\Users\\Toshimoto\\Desktop\\blockchain-qa-template\\test\\ExampleToken.spec.ts",
          "file": "\\test\\ExampleToken.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "mints only by owner",
              "fullTitle": "ExampleToken mints only by owner",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [, user] = await hardhat_1.ethers.getSigners();\nconst Token = await hardhat_1.ethers.getContractFactory(\"ExampleToken\");\nconst token = await Token.deploy(hardhat_1.ethers.parseUnits(\"1000000\")); // maxSupply\nawait token.mint(user.address, 100n);\n(0, chai_1.expect)(await token.totalSupply()).to.equal(100n);\n(0, chai_1.expect)(await token.balanceOf(user.address)).to.equal(100n);",
              "err": {},
              "uuid": "b047d8ba-b318-484b-8f57-1fa045bcf627",
              "parentUUID": "d0090051-8f7c-4df8-bd24-18b08b2f5332",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reverts mint from non-owner",
              "fullTitle": "ExampleToken reverts mint from non-owner",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [, user] = await hardhat_1.ethers.getSigners();\nconst Token = await hardhat_1.ethers.getContractFactory(\"ExampleToken\");\nconst token = await Token.deploy(hardhat_1.ethers.parseUnits(\"1000000\"));\nawait (0, chai_1.expect)(token.connect(user).mint(user.address, 1n)).to.be.reverted;",
              "err": {},
              "uuid": "4fb16844-f720-4411-8fc2-534c0e40f1a8",
              "parentUUID": "d0090051-8f7c-4df8-bd24-18b08b2f5332",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pauses transfers",
              "fullTitle": "ExampleToken pauses transfers",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [, user1, user2] = await hardhat_1.ethers.getSigners();\nconst Token = await hardhat_1.ethers.getContractFactory(\"ExampleToken\");\nconst token = await Token.deploy(1000n);\nawait token.mint(user1.address, 100n);\nawait token.pause();\nawait (0, chai_1.expect)(token.connect(user1).transfer(user2.address, 1n)).to.be.reverted;",
              "err": {},
              "uuid": "25b1e611-884d-44ba-8a24-81a8bab53ae4",
              "parentUUID": "d0090051-8f7c-4df8-bd24-18b08b2f5332",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b047d8ba-b318-484b-8f57-1fa045bcf627",
            "4fb16844-f720-4411-8fc2-534c0e40f1a8",
            "25b1e611-884d-44ba-8a24-81a8bab53ae4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 164,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "reports/mocha",
        "reportFilename": "report",
        "quiet": true,
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}